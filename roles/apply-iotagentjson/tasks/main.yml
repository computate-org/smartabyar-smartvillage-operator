---

- name: "Set namespace vars"
  set_fact:
    mongodb_namespace: "{{ values.mongodb.namespace | default(ansible_operator_meta.namespace, true) }}"
    message_broker_namespace: "{{ values.message_broker.namespace | default(ansible_operator_meta.namespace, true) }}"

- name: "Query mongodb and message broker pod"
  set_fact:
    mongodb_pod_name: "{{ query('kubernetes.core.k8s', kind='Pod', label_selector=('app.kubernetes.io/component=mongodb,app.kubernetes.io/instance=' + values.mongodb.name + ',app.kubernetes.io/name=' + values.mongodb.name), namespace=mongodb_namespace)[0].metadata.name }}"
    message_broker_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=values.message_broker.password_secret.name, namespace=message_broker_namespace)[0].data[values.message_broker.password_secret.key] | b64decode }}"

- name: "Install message broker secret on OpenShift"
  k8s:
    state: present
    kind: Secret
    api_version: v1
    name: iotagent-json-message-broker-secret
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'message-broker-password-secret.yaml') }}"
    
- name: Run create database scripts on MongoDB
  kubernetes.core.k8s_exec:
    pod: "{{ mongodb_pod_name }}"
    command: >-
      sh -c 'mongo -u "$MONGODB_ROOT_USER" -p "$MONGODB_ROOT_PASSWORD" --eval '"'"'
      {{ MONGODB_CREATE_USER_COMMAND_iotagentjson | indent(6, false) }}
      {{ MONGODB_CREATE_COLLECTIONS_COMMAND_iotagentjson | indent(6, false) }}
      '"'"''
    namespace: "{{ mongodb_namespace }}"
  register: create_user
  ignore_errors: True
  changed_when: false
- debug:
    var: create_user
- name: Test create_user success
  fail:
    msg: "{{ create_user }}"
  when: create_user.failed and create_user is not search("already exists")

- name: "Install iotagent-json service on OpenShift"
  k8s:
    state: present
    api_version: v1
    kind: Service
    name: "iotagent-json"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'service-iotagent-json.yaml') }}"
- name: "Install iotagent-json deployment on OpenShift"
  k8s:
    state: present
    api_version: apps/v1
    kind: Deployment
    name: "iotagent-json"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'deployment-iotagent-json.yaml') }}"
- name: "Install iotagent-json route on OpenShift"
  k8s:
    state: "{{ 'present' if values.iotagent.route.create else 'absent' }}"
    kind: Route
    api_version: route.openshift.io/v1
    name: iotagent-json
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'route-iotagent-json.yaml') }}"
  ignore_errors: true

