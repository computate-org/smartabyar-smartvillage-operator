---
MODEL_NAME: TrafficFlowObserved
SUBMODULE_SHORT_NAME: Transportation
DOMAIN_NAME: Smart Cities
schema:
  managementState:
    type: string
    default: Managed
    enum:
      - Managed
      - Unmanaged
  iotagent:
    type: object
    properties:
      host:
        type: string
        default: iotagent-json.iotagent.svc
      base_url:
        type: string
  context_broker:
    type: object
    properties:
      base_url:
        type: string
        default: http://scorpiobroker.scorpiobroker.svc:9090
  ngsi_ld:
    type: object
    properties:
      service:
        type: string
        default: smarttrafficlights
      service_path:
        type: string
        default: /Sweden/Veberod/CityCenter
      context:
        type: string
        default: https://raw.githubusercontent.com/computate-org/smartabyar-smartvillage-static/main/fiware/context.jsonld
  service_group:
    type: object
    properties:
      resource:
        type: string
        default: /iot/json
      apikey:
        type: string
        default: VeberodIntersection1
  device:
    type: object
    properties:
      transport:
        type: string
        default: MQTT
      id:
        type: string
        default: 'Sjobovagen-SE'
      mqtt_host:
        type: string
        default: default-rabbitmq.rabbitmq.svc
      mqtt_port:
        type: number
        default: 1883
      mqtt_subscription_topic:
        type: string
        default: iot/subscribe
      subscription_url:
        type: string
        default: "http://orionld-smartvillage-sync:8080"
  smartabyar_smartvillage:
    type: object
    properties:
      enabled:
        type: boolean
        default: true
      auth_secret_name:
        type: string
        default: keycloak-client-secret-smartvillage
      auth_token_url:
        type: string
        default: https://keycloak-sso.apps-crc.testing/auth/realms/SMARTVILLAGE/protocol/openid-connect/token
      site_base_url:
        type: string
        default: https://smartvillage-web-smartvillage.apps-crc.testing
      smart_model_api:
        type: string
        default: /api/traffic-flow-observed
  alternate_model:
    type: object
    properties:
      enabled:
        type: boolean
        default: true
      id:
        type: string
        default: sumo
      name:
        type: string
        default: SUMO
smart_data_model:
  attributes:
    location:
      required: true
      name: location
      type: "geo:point"
      description: |
        Geojson reference to the item. It can be Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon
    address:
      name: address
      type: object
      description: |
        The mailing address
      docs: |
        https://github.com/smart-data-models/dataModel.Transportation/blob/ca8d89fe82b71403fcb0905b96c79b8d9bff54bb/TrafficFlowObserved/model.yaml#L4-L34
    alternateName:
      name: alternateName
      type: string
      description: |
        An alternative name for this item
      docs: |
        https://github.com/smart-data-models/dataModel.Transportation/blob/ca8d89fe82b71403fcb0905b96c79b8d9bff54bb/TrafficFlowObserved/model.yaml#L35-L39
    areaServed:
      name: areaServed
      type: string
      description: |
        The geographic area where a service or offered item is provided
      docs: |
        https://github.com/smart-data-models/dataModel.Transportation/blob/ca8d89fe82b71403fcb0905b96c79b8d9bff54bb/TrafficFlowObserved/model.yaml#L40-L45
      alternate_name: edges
      alternate_description: |
        The edges the vehicle shall drive along, given as their ids, separated using spaces
      alternate_docs: |
        https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html#routes
    averageGapDistance:
      name: averageGapDistance
      type: number
      description: |
        Average gap distance between consecutive vehicles
      docs: |
        https://github.com/smart-data-models/dataModel.Transportation/blob/ca8d89fe82b71403fcb0905b96c79b8d9bff54bb/TrafficFlowObserved/model.yaml#L46-L53
      alternate_name: minGap
      alternate_description: |
        Empty space after leader [m]
      alternate_docs: |
        https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html#available_vtype_attributes
      minimum: 1
      default: 1
    averageHeadwayTime:
      # See Smart Data Model: 
      name: averageHeadwayTime
      type: number
      alternate_name: tau
      alternate_description: |
        The driver's desired (minimum) time headway. 
        Exact interpretation varies by model. 
        For the default model Krauss this is based on the net space between leader back and follower front).
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
      minimum: 0
    averageVehicleLength:
      name: averageVehicleLength
      type: number
      description: |
        Average length of the vehicles transiting during the observation period
      alternate_name: length
      alternate_description: |
        The vehicle's netto-length (length) (in m)
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
      minimum: 0
    averageVehicleSpeed:
      name: averageVehicleSpeed
      type: number
      description: |
        Average speed of the vehicles transiting during the observation period
      alternate_name: speed
      alternate_description: |
        speed to be kept while driving between startPos and endPos. This turns the stop into a waypoint.
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
      minimum: 0
    congested:
      name: congested
      type: boolean
      description: |
        Flags whether there was a traffic congestion during the observation period in the referred lane. The absence of this attribute means no traffic congestion
    dataProvider:
      name: dataProvider
      type: string
      description: |
        A sequence of characters identifying the provider of the harmonised data entity.
    dateCreated:
      name: dateCreated
      type: string
      description: |
        Entity creation timestamp. This will usually be allocated by the storage platform.
    dateModified:
      name: dateModified
      type: string
      description: |
        Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.
    dateObserved:
      name: dateObserved
      type: string
      description: |
        The date and time of this observation in ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval. As a workaround for the lack of support of Orion Context Broker for datetime intervals, it can be used two separate attributes: `dateObservedFrom`, `dateObservedTo`. [DateTime](https://schema.org/DateTime) or an ISO8601 interval represented as [Text](https://schema.org/Text)
    dateObservedFrom:
      name: dateObservedFrom
      type: string
      description: |
        Observation period start date and time. See `dateObserved`
    dateObservedTo:
      name: dateObservedTo
      type: string
      description: |
        Observation period end date and time. See `dateObserved`
    description:
      name: description
      type: string
      description: |
        A description of this item
    intensity:
      name: intensity
      type: number
      description: |
        Total number of vehicles detected during this observation period
      alternate_name: number
      alternate_description: |
        total number of vehicles, equally spaced
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
      minimum: 0
    laneDirection:
      name: laneDirection
      type: string
      description: |
        Usual direction of travel in the lane referred by this observation. This attribute is useful when the observation is not referencing any road segment, allowing to know the direction of travel of the traffic flow observed. Enum:forward, backward''. See RoadSegment for a description of the semantics of these values.
    laneId:
      name: laneId
      type: number
      description: |
        Lane identifier. Lane identification is done using the conventions defined by RoadSegment entity which are based on [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Forward_%26_backward,_left_%26_right).
      alternate_name: lane
      alternate_description: |
        the lane id takes the form <edge_id>_<lane_index>. the edge has to be part of the corresponding route. If the edge supports opposite direciton driving, the lane index may use values beyond the lane indices of the stop edge to define stops on the opposite side.
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
    name:
      name: name
      type: string
    occupancy:
      name: occupancy
      type: number
      description: |
        Fraction of the observation time where a vehicle has been occupying the observed lane
    owner:
      name: owner
      type: array
      description: |
        A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)
    refRoadSegment:
      name: refRoadSegment
      type: string
      description: |
        Concerned road segment on which the observation has been made. Reference to an entity of type RoadSegment
    reversedLane:
      name: reversedLane
      type: boolean
      description: |
        Flags whether traffic in the lane was reversed during the observation period. The absence of this attribute means no lane reversion
    seeAlso:
      name: seeAlso
      type: array
      description: |
        list of uri pointing to additional resources about the item
    source:
      name: source
      type: string
      description: |
        A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.
    vehicleSubType:
      name: vehicleSubType
      type: string
      description: |
        It allows to specify a sub type of `vehicleType`, eg if the `vehicleType` is set to `Lorry` the `vehicleSubType` may be `OGV1` or `OGV2` to convey more information about the exact type of vehicle.
    vehicleType:
      name: vehicleType
      type: string
      description: |
        Type of vehicle from the point of view of its structural characteristics. Enum:agriculturalVehicle, bicycle, bus, minibus, car, caravan, tram, tanker, carWithCaravan, carWithTrailer, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, trailer, van, constructionOrMaintenanceVehicle, trolley, binTrolley, sweepingMachine, cleaningTrolley
      alternate_name: vClass
      alternate_description: |
        An abstract vehicle class (see below). By default vehicles represent regular passenger cars.
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
    customRouteId:
      name: customRouteId
      type: string
      description: |
        The unique ID of the route in SUMO. 
      alternate_name: decel
      alternate_description: |
        The unique ID of the route in SUMO. 
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
    customSigma:
      name: customSigma
      type: number
      description: |
        The driver imperfection as a floating point number [0,1] (0 denotes perfect driving)
      alternate_name: sigma
      alternate_description: |
        The driver imperfection as a floating point number [0,1] (0 denotes perfect driving)
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
    customAcceleration:
      name: customAcceleration
      type: number
      description: |
        The acceleration ability of vehicles of this type (in m/s^2)
      alternate_name: accel
      alternate_description: |
        The acceleration ability of vehicles of this type (in m/s^2)
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
    customDeceleration:
      name: customDeceleration
      type: number
      description: |
        The deceleration ability of vehicles of this type (in m/s^2). 
      alternate_name: decel
      alternate_description: |
        The deceleration ability of vehicles of this type (in m/s^2). 
      alternate_docs: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
    customMinGreenTime:
      name: customMinGreenTime
      type: number
      description: |
        Min green time for the traffic light in seconds [1, 50]. 
      minimum: 1
      maximum: 50
    customMaxGreenTime:
      name: customMaxGreenTime
      type: number
      description: |
        Max green time for the traffic light in seconds [1, 50]. 
      minimum: 1
      maximum: 100
    customAverageVehiclesPerMinute:
      name: customAverageVehiclesPerMinute
      type: number
      description: |
        Average vehicle/min [1, 30]. 
      minimum: 1
      maximum: 30
    customDemandScalingFactor:
      name: customDemandScalingFactor
      type: number
      description: |
        Demand scaling factor (multiplies all vehicle demands) [1, 2]. 
      minimum: 1
      maximum: 2
    customQueueLengthThreshold:
      name: customQueueLengthThreshold
      type: number
      description: |
        queue length threshold between low-high content [1, 15]. 
    customTrafficLightId:
      name: customTrafficLightId
      type: string
      description: |
        The Smart Traffic Light ID. 
    customVehicleQueueThreshold:
      name: customVehicleQueueThreshold
      type: number
      default: 8
      minimum: 1
      maximum: 60
