---

- name: "Query {{ ENTITY_TYPE }}"
  set_fact:
    crd: "{{ query('kubernetes.core.k8s', kind=ENTITY_TYPE, resource_name=ansible_operator_meta.name, namespace=ansible_operator_meta.namespace)[0].spec }}"
  ignore_errors: true
- name: "Verify {{ ENTITY_TYPE }} exists"
  fail:
    msg: |-
      You need to deploy a {{ ENTITY_TYPE }} to OpenShift before running this playbook. See here for an example: https://github.com/computate-org/smartvillage-operator/blob/main/config/samples/smartvillage_v1_smartabyarsmartvillage.yaml
  when: crd is not defined

- name: "Set {{ ENTITY_TYPE }} facts"
  set_fact:
    zookeeper: "{{ crd.zookeeper }}"
    solr: "{{ crd.solr }}"
    sso: "{{ crd.sso }}"
    postgres: "{{ crd.postgres }}"
    fiware: "{{ crd.fiware }}"
    kafka: "{{ crd.kafka }}"
    mqtt: "{{ crd.mqtt }}"
    site: "{{ crd.site }}"
    auth: "{{ crd.auth }}"
    email: "{{ crd.email }}"
    import_data: "{{ crd.import_data }}"
    auth_role: "{{ crd.auth_role }}"
    sumo: "{{ crd.sumo }}"
    yggio: "{{ crd.yggio }}"

# Install PostgreSQL
- name: Install {{ site_name }} PostgreSQL cluster on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'postgrescluster.yaml') }}"
  when: postgres.create

# Install Red Hat SSO
- name: Query SSO postgres secret
  set_fact:
    sso_postgres_secret: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=sso.postgres_secret_name, namespace=ansible_operator_meta.namespace)[0].data }}"
- name: Install keycloak-db-secret on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak-db-secret.yaml') }}"
- name: Install {{ site_name }} Keycloak cluster on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Keycloak realm on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloakrealm.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Keycloak client on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloakclient.yaml') }}"
  when: sso.create

# Install Kafka
- name: Install {{ site_name }} Kafka cluster on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafka.yaml') }}"
- name: Install {{ site_name }} Kafka user on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkauser.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Kafka Topic smartvillage-sumo-run on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkatopic-smartvillage-sumo-run.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Kafka Topic smartvillage-sumo-run-report on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkatopic-smartvillage-sumo-run-report.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Kafka Topic smartvillage-sumo-stop on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkatopic-smartvillage-sumo-stop.yaml') }}"
  when: sso.create

# Install AMQ Broker
- name: Install {{ site_name }} AMQ Broker on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'activemqartemis.yaml') }}"
- name: Install {{ site_name }} AMQ Broker Address on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'activemqartemisaddress.yaml') }}"

# Install Solr
- name: Install Solr configmap-computate-configset configmap on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'configmap-solr-computate-configset.yaml') }}"
- name: Install Solr role bindings on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'rolebinding-solr.yaml') }}"
- name: Install Solr service account on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'serviceaccount-solr.yaml') }}"
- name: Install Solr Cloud on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'solrcloud.yaml') }}"
- name: Install Solr route on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'route-solr.yaml') }}"

- name: "Query prerequisite host names"
  set_fact:
    POSTGRES_SECRET: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=postgres.secret_name, namespace=ansible_operator_meta.namespace)[0].data }}"
  ignore_errors: true

- name: Verify PostgreSQL
  wait_for:
    host: "{{ postgres.service_name + '.' + ansible_operator_meta.namespace + '.svc' }}"
    port: "{{ postgres.port }}"
    state: started
    delay: 0
    timeout: 5
  register: verify_postgresql
  ignore_errors: yes
- name: "Verify PostgreSQL is running"
  fail:
    msg: |-
      The PostgreSQL service was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_postgresql.failed

- name: Verify MQTT
  wait_for:
    host: "{{ mqtt.service_name + '.' + ansible_operator_meta.namespace + '.svc' }}"
    port: "{{ mqtt.port }}"
    state: started
    delay: 0
    timeout: 5
  register: verify_mqtt
  ignore_errors: yes
- name: "Verify MQTT is running"
  fail:
    msg: |-
      The MQTT service was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_mqtt.failed

- name: Verify Kafka
  wait_for:
    host: "{{ kafka.service_name + '.' + ansible_operator_meta.namespace + '.svc' }}"
    port: "{{ kafka.port }}"
    state: started
    delay: 0
    timeout: 5
  register: verify_kafka
  ignore_errors: yes
- name: "Verify Kafka is running"
  fail:
    msg: |-
      The Kafka service was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_kafka.failed

- name: Verify Zookeeper
  wait_for:
    host: "{{ zookeeper.service_name + '.' + ansible_operator_meta.namespace + '.svc' }}"
    port: "{{ zookeeper.port }}"
    state: started
    delay: 0
    timeout: 5
  register: verify_zookeeper
  ignore_errors: yes
- name: "Verify Zookeeper is running"
  fail:
    msg: |-
      The Zookeeper service was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_zookeeper.failed

- name: Verify Solr
  wait_for:
    host: "{{ solr.service_name + '.' + ansible_operator_meta.namespace + '.svc' }}"
    port: "{{ solr.port }}"
    state: started
    delay: 0
    timeout: 5
  register: verify_solr
  ignore_errors: yes
- name: "Verify Solr is running"
  fail:
    msg: |-
      The Solr service was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_solr.failed

- name: Verify SSO
  wait_for:
    host: "{{ sso.host_name }}"
    port: "443"
    state: started
    delay: 0
    timeout: 5
  register: verify_sso
  ignore_errors: yes
- name: "Verify SSO is running"
  fail:
    msg: |-
      The SSO service https://{{ sso.host_name }} was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_sso.failed

- name: Install {{ site_name }}-web service on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'service-web.yaml') }}"
- name: Install {{ site_name }}-web route on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'route.yaml') }}"

- name: Query site host name
  set_fact:
    site_host_name: "{{ query('kubernetes.core.k8s', kind='Route', api_version='route.openshift.io/v1', resource_name=(site_name + '-web'), namespace=ansible_operator_meta.namespace)[0].spec.host }}"
- name: Set static base URL
  set_fact:
    site_base_url: "https://{{ site_host_name }}"
    static_base_url: "{{ site.static_base_url | default('https://' + site_host_name + '/static') }}"

#- name: Install {{ site_name }} secret on OpenShift
#  k8s:
#    state: present
#    definition: "{{ lookup('template', 'secret.yaml') }}"
- name: Install {{ site_name }} image stream on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'imagestream.yaml') }}"
- name: Install {{ site_name }} deployment config on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'deploymentconfig-web.yaml') }}"
#- name: Install {{ site_name }} worker persistent volume claims on OpenShift
#  k8s:
#    state: present
#    definition: "{{ lookup('template', 'persistentvolumeclaim.yaml') }}"
#  with_sequence: start=1 end=WORKER_REPLICAS
