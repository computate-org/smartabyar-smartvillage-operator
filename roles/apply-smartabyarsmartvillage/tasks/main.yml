---

- name: "Query {{ ENTITY_TYPE }}"
  set_fact:
    crd: "{{ (lookup('file', crd_path) | from_yaml).spec }}"
  ignore_errors: true
  when: crd_path is defined
- name: "Query {{ ENTITY_TYPE }}"
  set_fact:
    crd: "{{ query('kubernetes.core.k8s', kind=ENTITY_TYPE, resource_name=ansible_operator_meta.name, namespace=ansible_operator_meta.namespace)[0].spec }}"
  ignore_errors: true
  when: crd_path is not defined
- name: "Verify {{ ENTITY_TYPE }} exists"
  fail:
    msg: |-
      You need to deploy a {{ ENTITY_TYPE }} to OpenShift before running this playbook. See here for an example: https://github.com/computate-org/smartvillage-operator/blob/main/config/samples/smartvillage_v1_smartabyarsmartvillage.yaml
  when: crd is not defined

- block:
    - name: "{{ 'Install' if values.site.enable_dev_nodeports else 'Skip' }} zookeeper-nodeport NodePort service on OpenShift"
      k8s:
        state: "{{ 'present' if values.site.enable_dev_nodeports and values.zookeeper.create else 'absent' }}"
        api_version: v1
        kind: Service
        name: "zookeeper-nodeport"
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'service-zookeeper-nodeport.yaml') }}"
    - name: "{{ 'Install' if values.site.enable_dev_nodeports else 'Skip' }} solr-nodeport NodePort service on OpenShift"
      k8s:
        state: "{{ 'present' if values.site.enable_dev_nodeports and values.solr.create else 'absent' }}"
        api_version: v1
        kind: Service
        name: "solr-nodeport"
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'service-solr-nodeport.yaml') }}"
    - name: "{{ 'Install' if values.site.enable_dev_nodeports else 'Skip' }} fiware-broker-mqtt-nodeport NodePort service on OpenShift"
      k8s:
        state: "{{ 'present' if values.site.enable_dev_nodeports else 'absent' }}"
        api_version: v1
        kind: Service
        name: "fiware-broker-mqtt-nodeport"
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'service-fiware-broker-mqtt-nodeport.yaml') }}"
    - name: "{{ 'Install' if values.site.enable_dev_nodeports else 'Skip' }} site-nodeport NodePort service on OpenShift"
      k8s:
        state: "{{ 'present' if values.site.enable_dev_nodeports else 'absent' }}"
        api_version: v1
        kind: Service
        name: "site-nodeport"
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'service-site-nodeport.yaml') }}"
  when: values.site.enable_dev_nodeports

# Install PostgreSQL
- block:
    - name: "Install PostgreSQL {{ site_name }}-db-create configmap on OpenShift"
      k8s:
        state: "{{ 'present' if values.postgres.create else 'absent' }}"
        api_version: v1
        kind: ConfigMap
        name: "{{ site_name }}-db-create"
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'configmap-db-create.yaml') }}"
  when: values.postgres.create

# Install Red Hat SSO
- block:
    - name: "Query SSO postgres secret"
      set_fact:
        sso_postgres_secret: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=(values.sso.postgres_secret_name | default(schema.sso.properties.postgres_secret_name.default, true)), namespace=ansible_operator_meta.namespace)[0].data }}"
      when: values.sso.create
    - name: "Install keycloak-db-secret on OpenShift"
      k8s:
        state: "{{ 'present' if values.sso.create else 'absent' }}"
        kind: Secret
        api_version: v1
        name: keycloak-db-secret
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'keycloak-db-secret.yaml') }}"
    - name: "Install {{ site_name }} Keycloak realm on OpenShift"
      k8s:
        state: "{{ 'present' if values.sso.create else 'absent' }}"
        api_version: keycloak.org/v1alpha1
        kind: KeycloakRealm
        name: "{{ site_name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'keycloakrealm.yaml') }}"
    - name: "Install {{ site_name }} Keycloak client on OpenShift"
      k8s:
        state: "{{ 'present' if values.sso.create else 'absent' }}"
        api_version: keycloak.org/v1alpha1
        kind: KeycloakClient
        name: "{{ site_name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'keycloakclient.yaml') }}"
    - name: "Install {{ site_name }} Keycloak cluster on OpenShift"
      k8s:
        state: "{{ 'present' if values.sso.create else 'absent' }}"
        api_version: keycloak.org/v1alpha1
        kind: Keycloak
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: sso
        definition: "{{ lookup('template', 'keycloak.yaml') }}"
  when: values.sso.create

# Install Zookeeper
- block:
    - name: "Install Zookeeper persistent volume claim on OpenShift"
      k8s:
        state: "{{ 'present' if values.zookeeper.create else 'absent' }}"
        kind: PersistentVolumeClaim
        api_version: v1
        name: zookeeper
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'persistentvolumeclaim-zookeeper.yaml') }}"
    - name: "Install Zookeeper config map on OpenShift"
      k8s:
        state: "{{ 'present' if values.zookeeper.create else 'absent' }}"
        kind: ConfigMap
        api_version: v1
        name: zookeeper
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'configmap-zookeeper.yaml') }}"
    - name: "Install Zookeeper deployment on OpenShift"
      k8s:
        state: "{{ 'present' if values.zookeeper.create else 'absent' }}"
        kind: Deployment
        api_version: apps/v1
        name: zookeeper
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'deployment-zookeeper.yaml') }}"
    - name: "Install Zookeeper service on OpenShift"
      k8s:
        state: "{{ 'present' if values.zookeeper.create else 'absent' }}"
        kind: Service
        api_version: v1
        name: zookeeper
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'service-zookeeper.yaml') }}"
  when: values.zookeeper.create

# Install Solr

- block:
    - name: Add Zookeeper chart repo
      kubernetes.core.helm_repository:
        name: pravega
        repo_url: https://charts.pravega.io
      changed_when: false
    - name: Add Solr chart repo
      kubernetes.core.helm_repository:
        name: solr
        repo_url: https://solr.apache.org/charts
      changed_when: false
    - name: Install Zookeeper helm chart
      kubernetes.core.helm:
        name: zookeeper-operator
        chart_ref: pravega/zookeeper-operator
        set_values:
          - value: crd.create=false
          - value: rbac.create=false
          - value: watchNamespace={{ ansible_operator_meta.namespace }}
        release_namespace: "{{ ansible_operator_meta.namespace }}"
        release_state: present
        skip_crds: true
      changed_when: false
    - name: Install Solr helm chart
      kubernetes.core.helm:
        name: solr-operator
        chart_ref: solr/solr-operator
        set_values:
          - value: serviceAccount.create=true
          - value: serviceAccount.name=solr
          - value: podOptions.serviceAccountName=solr
          - value: watchNamespaces={{ ansible_operator_meta.namespace }}
          - value: zookeeper-operator.install=false
          - value: zookeeper-operator.use=true
        release_namespace: "{{ ansible_operator_meta.namespace }}"
        release_state: present
        skip_crds: true
      changed_when: false
    
    - name: "Install Solr configmap-computate-configset configmap on OpenShift"
      k8s:
        state: "{{ 'present' if values.solr.create else 'absent' }}"
        api_version: v1
        kind: ConfigMap
        name: computate-configset
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'configmap-solr-computate-configset.yaml') }}"
    - name: "Install Solr Cloud on OpenShift"
      k8s:
        state: "{{ 'present' if values.solr.create else 'absent' }}"
        api_version: solr.apache.org/v1beta1
        kind: SolrCloud
        name: default
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'solrcloud.yaml') }}"
    - name: "Install Solr route on OpenShift"
      k8s:
        state: "{{ 'present' if values.solr.create else 'absent' }}"
        kind: Route
        api_version: route.openshift.io/v1
        name: solr
        namespace: "{{ ansible_operator_meta.namespace }}"
        definition: "{{ lookup('template', 'route-solr.yaml') }}"
      ignore_errors: true
  when: values.solr.create

- name: "Verify Zookeeper"
  wait_for:
    host: "{{ values.zookeeper.service_name + '.' + ansible_operator_meta.namespace + '.svc' }}"
    port: "{{ values.zookeeper.port }}"
    state: started
    delay: 0
    timeout: 5
  register: verify_zookeeper
  ignore_errors: yes
  when: verify_connections and values.zookeeper.create
- name: "Verify Zookeeper is running"
  fail:
    msg: |-
      The Zookeeper service was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_connections and values.zookeeper.create and verify_zookeeper.failed

- name: "Verify Solr"
  wait_for:
    host: "{{ values.solr.service_name + '.' + ansible_operator_meta.namespace + '.svc' }}"
    port: "{{ values.solr.port }}"
    state: started
    delay: 0
    timeout: 5
  register: verify_solr
  ignore_errors: yes
  when: verify_connections and values.solr.create
- name: "Verify Solr is running"
  fail:
    msg: |-
      The Solr service was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_connections and solr.create and verify_solr.failed

- name: "Verify SSO"
  wait_for:
    host: "{{ values.sso.host_name }}"
    port: "443"
    state: started
    delay: 0
    timeout: 5
  register: verify_sso
  ignore_errors: yes
  when: verify_connections and values.sso.create
- name: "Verify SSO is running"
  fail:
    msg: |-
      The SSO service https://{{ sso.host_name }} was unavailable. Have you run the prerequisite Ansible Playbook? https://github.com/computate-org/smartvillage-operator/blob/main/prepare-smartabyarsmartvillage.yaml
  when: verify_connections and sso.create and verify_sso.failed


- name: "Query postgres pod"
  set_fact:
    postgres_pod_name: "{{ query('kubernetes.core.k8s', kind='Pod', label_selector='postgres-operator.crunchydata.com/cluster=postgres,postgres-operator.crunchydata.com/data=postgres,postgres-operator.crunchydata.com/instance-set=smartvillage,postgres-operator.crunchydata.com/patroni=postgres-ha,postgres-operator.crunchydata.com/role=master', namespace=ansible_operator_meta.namespace)[0].metadata.name }}"
  when: values.postgres.create
- name: Run create database scripts on PostgreSQL
  kubernetes.core.k8s_exec:
    pod: "{{ postgres_pod_name }}"
    command: >-
      bash -c 'curl https://raw.githubusercontent.com/computate-org/smartabyar-smartvillage/main/src/main/resources/sql/db-create.sql | psql -U smartvillage smartvillage'
    namespace: "{{ ansible_operator_meta.namespace }}"
  when: values.postgres.create
  changed_when: false

- name: Upload computate configset to solr
  kubernetes.core.k8s_exec:
    pod: default-solrcloud-0
    command: >-
      /opt/solr/bin/solr zk upconfig -n computate -d /opt/solr/server/solr/configsets/computate -z 'default-solrcloud-zookeeper-client:2181'
    namespace: "{{ ansible_operator_meta.namespace }}"
  when: verify_connections and values.solr.create
  register: solr_upconfig
  changed_when: false
- debug:
    var: solr_upconfig

- name: Create Solr collection
  kubernetes.core.k8s_exec:
    pod: default-solrcloud-0
    command: >-
      /opt/solr/bin/solr create_collection -c {{ values.solr.collection }} -n computate
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: create_collection
  ignore_errors: True
  when: verify_connections and values.solr.create
  changed_when: create_collection is not search("already exists")
- name: Test create_collection success
  fail:
    msg: "{{ command_status }}"
  when: verify_connections and values.solr.create and create_collection.failed and create_collection is not search("already exists")

# Install site
- name: "Install {{ site_name }}-web service on OpenShift"
  k8s:
    state: "{{ 'present' if values.site.create else 'absent' }}"
    api_version: v1
    kind: Service
    name: "smartabyar-smartvillage-web"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'service-web.yaml') }}"
  when: values.site.create
- name: "Install {{ site_name }}-web route on OpenShift"
  k8s:
    state: "{{ 'present' if values.site.create else 'absent' }}"
    api_version: route.openshift.io/v1
    kind: Route
    name: "{{ site_name }}-web"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'route-web.yaml') }}"
  when: values.site.create
- name: "Install orionld-smartvillage-sync service on OpenShift"
  k8s:
    state: "{{ 'present' if values.ngsi_ld.sync else 'absent' }}"
    api_version: v1
    kind: Service
    name: "orionld-smartvillage-sync"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'service-orionld-sync.yaml') }}"
  when: values.ngsi_ld.sync

- name: "Query site host name"
  set_fact:
    site_host_name: "{{ query('kubernetes.core.k8s', kind='Route', api_version='route.openshift.io/v1', resource_name=(site_name + '-web'), namespace=ansible_operator_meta.namespace)[0].spec.host | default(values.site.host_name) }}"

#- name: "Install {{ site_name }} secret on OpenShift"
#  k8s:
#    state: "{{ 'present' if site.create else 'absent' }}"
#    namespace: "{{ ansible_operator_meta.namespace }}"
#    definition: "{{ lookup('template', 'secret.yaml') }}"
- name: "Install {{ site_name }}-web deployment on OpenShift"
  k8s:
    state: "{{ 'present' if values.site.create else 'absent' }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ site_name }}-web"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'deployment-web.yaml') }}"
  when: values.site.create
- name: "Install {{ site_name }}-worker deployment on OpenShift"
  k8s:
    state: "{{ 'present' if values.site.create else 'absent' }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ site_name }}-worker"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'deployment-worker.yaml') }}"
  when: values.site.create
- name: "Install {{ site_name }}-sumo deployment on OpenShift"
  k8s:
    state: "{{ 'present' if values.site.create else 'absent' }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ site_name }}-sumo"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'deployment-sumo.yaml') }}"
  when: values.site.create
- name: "Install {{ site_name }}-orionld-sync deployment on OpenShift"
  k8s:
    state: "{{ 'present' if values.ngsi_ld.sync else 'absent' }}"
    api_version: apps/v1
    kind: Deployment
    name: "orionld-smartvillage-sync"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'deployment-orionld-sync.yaml') }}"
  when: values.ngsi_ld.sync
#- name: "Install {{ site_name }} worker persistent volume claims on OpenShift"
#  k8s:
#    state: "{{ 'present' if site.create else 'absent' }}"
#    namespace: "{{ ansible_operator_meta.namespace }}"
#    definition: "{{ lookup('template', 'persistentvolumeclaim.yaml') }}"
#  with_sequence: start=1 end=WORKER_REPLICAS
