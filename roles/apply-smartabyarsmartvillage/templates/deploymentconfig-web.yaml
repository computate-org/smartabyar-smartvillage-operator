spec:
  replicas: {{ site.web_replicas }}
  selector:
    app: "{{ site_name }}-web"
    deploymentconfig: "{{ site_name }}-web"
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    type: Rolling
    rollingParams:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: "{{ site_name }}-web"
        deploymentconfig: "{{ site_name }}-web"
    spec:
      containers:
        - imagePullPolicy: Always
          command:
            - /usr/lib/jvm/java-11-openjdk/bin/java
            - -cp
            - .:*
            - org.computate.smartvillageview.enus.vertx.MainVerticle
          name: "{{ site_name }}"
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8081
              name: cluster
              protocol: TCP
            - containerPort: 9779
              name: prometheus
              protocol: TCP
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 3333
              name: jms
              protocol: TCP
            - containerPort: 8998
              name: debug
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: "HTTP"
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 20
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: "HTTP"
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 20
          resources:
            limits:
              memory: '{{ site.web_resources.limits.memory }}'
              cpu: '{{ site.web_resources.limits.cpu }}'
            requests:
              memory: '{{ site.web_resources.limits.memory }}'
              cpu: '{{ site.web_resources.limits.cpu }}'
          env:

            - name: JAVA_HOME
              value: /usr/lib/jvm/java-11-openjdk
            - name: SITE_PORT
              value: "8080"
            - name: SITE_BASE_URL
              value: "https://{{ site_host_name }}"
            - name: STATIC_BASE_URL
              value: "{{ static_base_url }}"
            - name: STATIC_PATH
              value: "/usr/local/src/smartabyar-smartvillage-static"
            - name: SITE_ZONE
              value: "{{ site.zone }}"
            - name: SITE_LOCALE
              value: "{{ site.locale }}"
            - name: SITE_INSTANCES
              value: "{{ site.instances }}"
            - name: OPENSHIFT_SERVICE
              value: "{{ site_name }}"
            - name: CLUSTER_PORT
              value: "8081"
            - name: WORKER_POOL_SIZE
              value: "{{ site.worker_pool_size }}"
            - name: DYNAMIC_PAGE_PATH
              value: '["/usr/local/src/smartabyar-smartvillage/page"]'
            - name: VERTX_WARNING_EXCEPTION_SECONDS
              value: "{{ site.vertx_warning_exception_seconds }}"
            - name: CLUSTER_HOST_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: CLUSTER_PUBLIC_HOST_NAME
              value: "{{ site_name }}.{{ ansible_operator_meta.namespace }}.svc"
            - name: "FONTAWESOME_KIT"
              valueFrom:
                secretKeyRef:
                  key: "FONTAWESOME_KIT"
                  name: "{{ site.secret_name }}"
            - name: JAVA_OPTS
              value: "{{ site.java_opts }}"

            - name: ZOOKEEPER_HOST_NAME
              value: "{{ zookeeper.service_name }}"
            - name: ZOOKEEPER_PORT
              value: "{{ zookeeper.port }}"
            - name: ZOOKEEPER_MAX_RETRIES
              value: "{{ zookeeper.max_retries }}"
            - name: ZOOKEEPER_BASE_SLEEP_TIME_MILLIS
              value: "{{ zookeeper.base_sleep_time_millis }}"
            - name: ZOOKEEPER_MAX_SLEEP_MILLIS
              value: "{{ zookeeper.max_sleep_millis }}"
            - name: ZOOKEEPER_CONNECTION_TIMEOUT_MILLIS
              value: "{{ zookeeper.connection_timeout_millis }}"
            - name: ZOOKEEPER_SESSION_TIMEOUT_MILLIS
              value: "{{ zookeeper.session_timeout_millis }}"

            - name: AUTH_REALM
              value: "{{ auth.realm }}"
            - name: AUTH_CLIENT
              valueFrom:
                secretKeyRef:
                  key: CLIENT_ID
                  name: "{{ sso.client_secret_name }}"
            - name: AUTH_SECRET
              valueFrom:
                secretKeyRef:
                  key: CLIENT_SECRET
                  name: "{{ sso.client_secret_name }}"
            - name: AUTH_HOST_NAME
              value: "{{ auth.host_name | default(sso.host_name) }}"
            - name: AUTH_PORT
              value: "{{ auth.port }}"
            - name: AUTH_SSL
              value: "{{ auth.ssl }}"
            - name: AUTH_URL
              value: "https://{{ auth.host_name | default(sso.host_name) }}/auth"
            - name: AUTH_TOKEN_URI
              value: "{{ auth.token_uri }}"

            - name: JDBC_HOST
              value: "{{ postgres.service_name }}"
            - name: JDBC_PORT
              value: "{{ postgres.port }}"
            - name: JDBC_DATABASE
              valueFrom:
                secretKeyRef:
                  key: dbname
                  name: {{ postgres.secret_name }}
            - name: JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  key: user
                  name: {{ postgres.secret_name }}
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ postgres.secret_name }}

            - name: SOLR_HOST_NAME
              value: "{{ solr.service_name }}"
            - name: SOLR_PORT
              value: "{{ solr.port }}"
            - name: SOLR_URL
              value: "{{ 'https://' if solr.ssl else 'http://' }}{{ solr.service_name }}:{{ solr.port }}/solr/{{ solr.collection }}"
            - name: SOLR_COLLECTION
              value: "{{ solr.collection }}"
{% if email.enabled %}

            - name: EMAIL_AUTH
              valueFrom:
                secretKeyRef:
                  key: EMAIL_AUTH
                  name: "{{ email.secret_name }}"
            - name: EMAIL_FROM
              valueFrom:
                secretKeyRef:
                  key: EMAIL_FROM
                  name: "{{ email.secret_name }}"
            - name: EMAIL_HOST
              valueFrom:
                secretKeyRef:
                  key: EMAIL_HOST
                  name: "{{ email.secret_name }}"
            - name: EMAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: EMAIL_PASSWORD
                  name: "{{ email.secret_name }}"
            - name: EMAIL_PORT
              valueFrom:
                secretKeyRef:
                  key: EMAIL_PORT
                  name: "{{ email.secret_name }}"
            - name: EMAIL_SSL
              valueFrom:
                secretKeyRef:
                  key: EMAIL_SSL
                  name: "{{ email.secret_name }}"
            - name: EMAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  key: EMAIL_USERNAME
                  name: "{{ email.secret_name }}"
{% endif %}

            - name: AUTH_ROLE_ADMIN
              value: '{{ auth_role.admin }}'
            - name: AUTH_ROLE_REQUIRED_SiteUser
              value: '{{ auth_role.siteuser }}'
            - name: AUTH_ROLE_REQUIRED_MapResult
              value: '{{ auth_role.mapresult }}'
            - name: AUTH_ROLE_REQUIRED_SystemEvent
              value: '{{ auth_role.systemevent }}'
            - name: AUTH_ROLE_REQUIRED_SitePage
              value: '{{ auth_role.sitepage }}'
            - name: AUTH_ROLE_REQUIRED_SiteHtm
              value: '{{ auth_role.sitehtm }}'
            - name: AUTH_ROLE_REQUIRED_IotNode
              value: '{{ auth_role.iotnode }}'
            - name: AUTH_ROLE_REQUIRED_IotNodeStep
              value: '{{ auth_role.iotnodestep }}'
            - name: AUTH_ROLE_REQUIRED_PersonStep
              value: '{{ auth_role.personstep }}'
            - name: AUTH_ROLE_REQUIRED_BicycleStep
              value: '{{ auth_role.bicyclestep }}'
            - name: AUTH_ROLE_REQUIRED_TimeStep
              value: '{{ auth_role.timestep }}'
            - name: AUTH_ROLE_REQUIRED_TrafficSimulation
              value: '{{ auth_role.trafficsimulation }}'
            - name: AUTH_ROLE_REQUIRED_TrafficFlowObserved
              value: '{{ auth_role.trafficflowobserved }}'
            - name: AUTH_ROLE_REQUIRED_TrafficLight
              value: '{{ auth_role.trafficlight }}'
            - name: AUTH_ROLE_REQUIRED_TrafficLightStep
              value: '{{ auth_role.trafficlightstep }}'
            - name: AUTH_ROLE_REQUIRED_VehicleStep
              value: '{{ auth_role.vehiclestep }}'

            - name: SUMO_EXECUTABLE_PATH
              value: /usr/local/bin/sumo
            - name: PYTHON_EXECUTABLE_PATH
              value: /opt/python/bin/python

            - name: "DEFAULT_MAP_LOCATION"
              value: "55.61888,13.548799"
            - name: "DEFAULT_MAP_ZOOM"
              value: "11"
{% if email.enabled %}

            - name: "YGGIO_HOST_NAME"
              valueFrom:
                secretKeyRef:
                  key: "YGGIO_HOST_NAME"
                  name: "{{ site.secret_name }}"
            - name: "YGGIO_PORT"
              valueFrom:
                secretKeyRef:
                  key: "YGGIO_PORT"
                  name: "{{ site.secret_name }}"
            - name: "YGGIO_SSL"
              valueFrom:
                secretKeyRef:
                  key: "YGGIO_SSL"
                  name: "{{ site.secret_name }}"
            - name: "YGGIO_API_RELATIVE_URI_IotNode"
              value: "{{ yggio.api_relative_uri_iotnode }}"
            - name: "YGGIO_AUTH_LOCAL_URI"
              value: "{{ yggio.auth_local_uri }}"
            - name: "YGGIO_USERNAME"
              valueFrom:
                secretKeyRef:
                  key: "YGGIO_USERNAME"
                  name: "{{ site.secret_name }}"
            - name: "YGGIO_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: "YGGIO_PASSWORD"
                  name: "{{ site.secret_name }}"
{% endif %}

            - name: "FCD_SYNC_PATH"
              value: /usr/local/share/sumo/fcd

            - name: "KAFKA_BROKERS"
              value: "{{ kafka.service_name }}:{{ kafka.port }}"
            - name: "KAFKA_GROUP"
              value: "{{ kafka.group }}"
            - name: "KAFKA_SECURITY_PROTOCOL"
              value: "{{ kafka.security_protocol }}"
            - name: "KAFKA_SSL_KEYSTORE_TYPE"
              value: "{{ kafka.ssl_keystore_type }}"
            - name: "KAFKA_SSL_KEYSTORE_LOCATION"
              value: "{{ kafka.ssl_keystore_location }}"
            - name: "KAFKA_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: "user.password"
                  name: "{{ kafka.keystore_secret }}"
            - name: "KAFKA_SSL_TRUSTSTORE_TYPE"
              value: "{{ kafka.ssl_truststore_type }}"
            - name: "KAFKA_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: "ca.password"
                  name: "{{ kafka.truststore_secret }}"
            - name: "KAFKA_SSL_TRUSTSTORE_LOCATION"
              value: "{{ kafka.ssl_truststore_location }}"

            - name: "MQTT_HOST"
              value: "{{ mqtt.service_name }}"
            - name: "MQTT_PORT"
              value: "{{ mqtt.port }}"
            - name: "MQTT_IOT_SUBSCRIBE_TOPIC"
              value: "{{ mqtt.iot_subscribe_topic }}"
          volumeMounts:
            - mountPath: /opt/kafka/keystore
              name: "{{ kafka.keystore_secret }}"
              readOnly: true
            - mountPath: /opt/kafka/truststore
              name: "{{ kafka.truststore_secret }}"
              readOnly: true
      volumes:
        - name: "{{ kafka.keystore_secret }}"
          secret:
            defaultMode: 420
            secretName: "{{ kafka.keystore_secret }}"
        - name: "{{ kafka.truststore_secret }}"
          secret:
            defaultMode: 420
            secretName: "{{ kafka.truststore_secret }}"
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - {{ site_name }}
        from:
          kind: ImageStreamTag
          name: '{{ site_name }}:latest'
          namespace: "{{ ansible_operator_meta.namespace }}"
      type: ImageChange
    - type: ConfigChange
