metadata:
  labels:
    app.kubernetes.io/instance: demo-scorpiobroker
    app.kubernetes.io/name: scorpiobroker
spec:
  replicas: {{ values.scorpiobroker.replicas }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: scorpiobroker
      app.kubernetes.io/name: scorpiobroker
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: scorpiobroker
        app.kubernetes.io/name: scorpiobroker
        app.kubernetes.io/version: 1.0.1
    spec:
      containers:
        - name: scorpiobroker
          env:
            - name: QUARKUS_VERTX_MAX_EVENT_LOOP_EXECUTE_TIME
              value: '60'
            - name: QUARKUS_VERTX_MAX_WORKER_EXECUTE_TIME
              value: '60'
            - name: QUARKUS_VERTX_WARNING_EXCEPTION_TIME
              value: '30'

            - name: DBHOST
              value: "{{ values.postgres.service_name }}"
            - name: DBPORT
              value: "{{ values.postgres.port }}"
            - name: DBNAME
              valueFrom:
                secretKeyRef:
                  key: dbname
                  name: "{{ values.postgres.secret_name }}"
            - name: DBUSER
              valueFrom:
                secretKeyRef:
                  key: user
                  name: "{{ values.postgres.secret_name }}"
            - name: DBPASS
              valueFrom:
                secretKeyRef:
                  key: password
                  name: "{{ values.postgres.secret_name }}"

            - name: "BUSHOST"
              value: "{{ values.kafka.service_name }}"
            - name: "BUSPORT"
              value: "{{ values.kafka.port }}"

            - name: "MP_MESSAGING_INCOMING_REGISTRYRETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYRETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYBATCHRETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_ISUBSRETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_INOTIFICATIONRETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_SUBALIVERETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_SUBSYNCRETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBALIVERETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBSYNCRETRIEVE_GROUP_ID"
              value: "{{ values.kafka.group }}"

            - name: "MP_MESSAGING_OUTGOING_REGISTRY_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITY_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITYBATCH_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_HISTORY_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_ISUBS_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_INOTIFICATION_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_SUBALIVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_SUBSYNC_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBALIVE_GROUP_ID"
              value: "{{ values.kafka.group }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBSYNC_GROUP_ID"
              value: "{{ values.kafka.group }}"

            - name: "MP_MESSAGING_INCOMING_REGISTRYRETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYRETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYBATCHRETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_ISUBSRETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_INOTIFICATIONRETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_SUBALIVERETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_SUBSYNCRETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBALIVERETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBSYNCRETRIEVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"

            - name: "MP_MESSAGING_OUTGOING_REGISTRY_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITY_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITYBATCH_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_HISTORY_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_ISUBS_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_INOTIFICATION_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_SUBALIVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_SUBSYNC_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBALIVE_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBSYNC_SECURITY_PROTOCOL"
              value: "{{ values.kafka.security_protocol }}"

            - name: "MP_MESSAGING_INCOMING_REGISTRYRETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYRETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYBATCHRETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_ISUBSRETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_INOTIFICATIONRETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_SUBALIVERETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_SUBSYNCRETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBALIVERETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBSYNCRETRIEVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"

            - name: "MP_MESSAGING_OUTGOING_REGISTRY_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITY_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITYBATCH_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_HISTORY_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_ISUBS_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_INOTIFICATION_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_SUBALIVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_SUBSYNC_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBALIVE_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBSYNC_SSL_KEYSTORE_LOCATION"
              value: "{{ values.kafka.ssl_keystore_location }}"

            - name: "MP_MESSAGING_INCOMING_REGISTRYRETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_ENTITYRETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_ENTITYBATCHRETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_ISUBSRETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_INOTIFICATIONRETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_SUBALIVERETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_SUBSYNCRETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_REGSUBALIVERETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_INCOMING_REGSUBSYNCRETRIEVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password

            - name: "MP_MESSAGING_OUTGOING_REGISTRY_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_ENTITY_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_ENTITYBATCH_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_HISTORY_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_ISUBS_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_INOTIFICATION_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_SUBALIVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_SUBSYNC_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_REGSUBALIVE_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password
            - name: "MP_MESSAGING_OUTGOING_REGSUBSYNC_SSL_KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.keystore_secret }}"
                  key: user.password

            - name: "MP_MESSAGING_INCOMING_REGISTRYRETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYRETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_ENTITYBATCHRETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_ISUBSRETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_INOTIFICATIONRETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_SUBALIVERETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_SUBSYNCRETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBALIVERETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_INCOMING_REGSUBSYNCRETRIEVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"

            - name: "MP_MESSAGING_OUTGOING_REGISTRY_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITY_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_ENTITYBATCH_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_HISTORY_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_ISUBS_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_INOTIFICATION_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_SUBALIVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_SUBSYNC_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBALIVE_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"
            - name: "MP_MESSAGING_OUTGOING_REGSUBSYNC_SSL_TRUSTSTORE_LOCATION"
              value: "{{ values.kafka.ssl_truststore_location }}"

            - name: "MP_MESSAGING_INCOMING_REGISTRYRETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_ENTITYRETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_ENTITYBATCHRETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_ISUBSRETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_INOTIFICATIONRETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_SUBALIVERETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_SUBSYNCRETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_REGSUBALIVERETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_INCOMING_REGSUBSYNCRETRIEVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password

            - name: "MP_MESSAGING_OUTGOING_REGISTRY_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_ENTITY_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_ENTITYBATCH_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_HISTORY_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_ISUBS_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_INOTIFICATION_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_SUBALIVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_SUBSYNC_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_REGSUBALIVE_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password
            - name: "MP_MESSAGING_OUTGOING_REGSUBSYNC_SSL_TRUSTSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: "{{ values.kafka.truststore_secret }}"
                  key: ca.password

            - name: "SCORPIO_TOPICS_ENTITY"
              value: "{{ values.kafka.topic_names.entity }}"
            - name: "SCORPIO_TOPICS_ENTITYBATCH"
              value: "{{ values.kafka.topic_names.entitybatch }}"
            - name: "SCORPIO_TOPICS_REGISTRY"
              value: "{{ values.kafka.topic_names.registry }}"
            - name: "SCORPIO_TOPICS_TEMPORAL"
              value: "{{ values.kafka.topic_names.temporal }}"
            - name: "SCORPIO_TOPICS_INTERNALNOTIFICATION"
              value: "{{ values.kafka.topic_names.inotify }}"
            - name: "SCORPIO_TOPICS_INTERNALREGSUB"
              value: "{{ values.kafka.topic_names.iregsub }}"
            - name: "SCORPIO_TOPICS_SUBALIVE"
              value: "{{ values.kafka.topic_names.subalive }}"
            - name: "SCORPIO_TOPICS_SUBSYNC"
              value: "{{ values.kafka.topic_names.subsync }}"
            - name: "SCORPIO_TOPICS_REGSUBALIVE"
              value: "{{ values.kafka.topic_names.regsubalive }}"
            - name: "SCORPIO_TOPICS_REGSUBSYNC"
              value: "{{ values.kafka.topic_names.regsubsync }}"
          image: 'docker.io/scorpiobroker/all-in-one-runner:java-kafka-latest'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9090
            timeoutSeconds: 30
          ports:
            - containerPort: 9090
              name: http
              protocol: TCP
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9090
            timeoutSeconds: 30
          resources:
            limits:
              cpu: '{{ values.scorpiobroker.resources.limits.cpu }}'
              memory: '{{ values.scorpiobroker.resources.limits.memory }}'
            requests:
              cpu: '{{ values.scorpiobroker.resources.requests.cpu }}'
              memory: '{{ values.scorpiobroker.resources.requests.memory }}'
          volumeMounts:
            - mountPath: /opt/kafka/keystore
              name: "{{ values.kafka.keystore_secret }}"
              readOnly: true
            - mountPath: /opt/kafka/truststore
              name: "{{ values.kafka.truststore_secret }}"
              readOnly: true
      volumes:
        - name: "{{ values.kafka.keystore_secret }}"
          secret:
            defaultMode: 420
            secretName: "{{ values.kafka.keystore_secret }}"
        - name: "{{ values.kafka.truststore_secret }}"
          secret:
            defaultMode: 420
            secretName: "{{ values.kafka.truststore_secret }}"
