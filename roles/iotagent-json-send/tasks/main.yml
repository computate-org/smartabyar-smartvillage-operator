---

- debug:
    var: values
- name: "Query the Orion-LD Context Broker service"
  set_fact:
    context_broker_port: "{{ query('kubernetes.core.k8s', kind='Service', resource_name=values.context_broker.name, namespace=(values.context_broker.namespace | default(ansible_operator_meta.namespace, true)))[0].spec.ports | community.general.json_query(QUERY) | first }}"
  vars: 
    QUERY: |-
      [?name=='http'].port
  when: values.context_broker.base_url == ''
- name: "Configure context_broker_base_url"
  set_fact:
    context_broker_base_url: "http://{{ query('kubernetes.core.k8s', kind='Route', resource_name=values.context_broker.name, namespace=(values.context_broker.namespace | default(ansible_operator_meta.namespace, true)))[0].spec.host }}"
  when: values.context_broker.base_url == '' and verify_connections is defined and not verify_connections
- name: "Configure context_broker_base_url"
  set_fact:
    context_broker_base_url: "http://{{ values.context_broker.name }}.{{ values.context_broker.namespace | default(ansible_operator_meta.namespace, true) }}.svc:{{ context_broker_port }}"
  when: values.context_broker.base_url == '' and (verify_connections is not defined or verify_connections)
- name: "Configure context broker base url"
  set_fact:
    context_broker_base_url: "{{ values.context_broker.base_url }}"
  when: values.context_broker.base_url != ''
- name: "Update values.context_broker.base_url"
  set_fact:
    values: "{{ values | combine({'context_broker':{'base_url':context_broker_base_url}}, recursive=true) }}"
  when: values.context_broker.base_url == ''

- debug:
    var: values.message_broker.secret.name
- debug:
    var: values.message_broker.namespace
- name: "Query message broker secret"
  set_fact:
    message_broker_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=values.message_broker.secret.name, namespace=(values.message_broker.namespace | default(ansible_operator_meta.namespace, true)))[0].data[values.message_broker.secret.key] | b64decode | default('') }}"
  when: values.message_broker.secret.name

- name: Create a /tmp/{{ values.service_group.apikey }} directory for the temporary file data
  ansible.builtin.file:
    path: "/tmp/{{ values.service_group.apikey }}"
    state: directory
    mode: '0755'
- name: Write /tmp/{{ values.service_group.apikey }}/{{ values.device.id }}.json to temporary file
  copy:
    content: "{{ lookup('template', 'device_values.yml') | from_yaml | to_nice_json }}"
    dest: "/tmp/{{ values.service_group.apikey }}/{{ values.device.id }}.json"

- name: Publish message on MQTT {{ mqtt_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}:{{ mqtt_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }} topic /{{ values.service_group.apikey }}/{{ values.device.id }}/attrs to device /{{ values.service_group.apikey }}/{{ values.device.id }}/attrs
  community.general.mqtt:
    server: "{{ mqtt_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}"
    port: "{{ mqtt_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }}"
    username: "{{ values.message_broker.user | default('') }}"
    password: "{{ message_broker_password }}"
    topic: "/{{ values.service_group.apikey }}/{{ values.device.id }}/attrs"
    payload: "{{ lookup('template', 'device_values.yml') | from_yaml | to_json }}"
    qos: 0
  when: values.message_broker.transport == 'MQTT' and values.message_broker.user is not defined and message_broker_password is not defined
- name: Publish message on MQTT {{ mqtt_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}:{{ mqtt_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }} topic /{{ values.service_group.apikey }}/{{ values.device.id }}/attrs to device /{{ values.service_group.apikey }}/{{ values.device.id }}/attrs
  community.general.mqtt:
    server: "{{ mqtt_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}"
    port: "{{ mqtt_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }}"
    topic: "/{{ values.service_group.apikey }}/{{ values.device.id }}/attrs"
    payload: "{{ lookup('template', 'device_values.yml') | from_yaml | to_json }}"
    qos: 0
  when: values.message_broker.transport == 'MQTT' and not (values.message_broker.user is not defined and message_broker_password is not defined)

- name: Publish message on AMQP amqp://{{ amqp_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}:{{ amqp_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }}/%2F routing key .{{ values.service_group.apikey }}.{{ values.device.id }}.attrs to device /{{ values.service_group.apikey }}/{{ values.device.id }}/attrs
  community.rabbitmq.rabbitmq_publish:
    proto: amqp
    vhost: "%2F"
    durable: true
    host: "{{ amqp_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}"
    port: "{{ amqp_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }}"
    routing_key: ".{{ values.service_group.apikey }}.{{ values.device.id }}.attrs"
    username: "{{ values.message_broker.user | default('') }}"
    password: "{{ message_broker_password }}"
    exchange: "amq.topic"
    body: "{{ lookup('template', 'device_values.yml') | from_yaml | to_json }}"
    content_type: "text/plain"
  when: values.message_broker.transport == 'AMQP' and values.message_broker.user is defined and message_broker_password is defined
- name: Publish message on AMQP amqp://{{ amqp_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}:{{ amqp_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }}/%2F routing key .{{ values.service_group.apikey }}.{{ values.device.id }}.attrs to device /{{ values.service_group.apikey }}/{{ values.device.id }}/attrs
  community.rabbitmq.rabbitmq_publish:
    proto: amqp
    vhost: "%2F"
    durable: true
    host: "{{ amqp_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}"
    port: "{{ amqp_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }}"
    routing_key: ".{{ values.service_group.apikey }}.{{ values.device.id }}.attrs"
    exchange: "amq.topic"
    body: "{{ lookup('template', 'device_values.yml') | from_yaml | to_json }}"
    content_type: "text/plain"
  when: values.message_broker.transport == 'AMQP' and not (values.message_broker.user is defined and message_broker_password is defined)

- debug:
    var: "{{ lookup('template', 'device_values.yml') | from_yaml | to_json }}"
- debug:
    var: context_broker_base_url
- name: >-
    Query the context broker: 
    curl -H 'Accept: "*/*"'
    -H 'Content-Type: application-json'
    -H 'Fiware-Service: {{ values.ngsi_ld.service }}'
    -H 'Fiware-ServicePath: {{ values.ngsi_ld.service_path }}'
    -H 'NGSILD-Tenant: {{ values.ngsi_ld.service }}'
    -H 'NGSILD-Path: {{ values.ngsi_ld.service_path }}'
    '{{ values.orionld.route.host | default(context_broker_base_url) }}/ngsi-ld/v1/entities/{{ ENTITY_NAME | string | urlencode }}'
  connection: local
  uri:
    timeout: 90
    url: "{{ context_broker_base_url }}/ngsi-ld/v1/entities/{{ ENTITY_NAME | string | urlencode }}"
    method: GET
    headers:
      Fiware-Service: "{{ values.ngsi_ld.service }}"
      Fiware-ServicePath: "{{ values.ngsi_ld.service_path }}"
      NGSILD-Tenant: "{{ values.ngsi_ld.service }}"
      NGSILD-Path: "{{ values.ngsi_ld.service_path }}"
      Content-Type: "application/json"
      Accept: "*/*"
    return_content: true
    validate_certs: false
    status_code: 
      - 200
  register: CB_ENTITY_AFTER
- debug:
    var: CB_ENTITY_AFTER
- name: Run this command to query the entity in the context broker
  debug:
    msg: >-
      curl -H 'Accept: "*/*"'
      -H 'Content-Type: application-json'
      -H 'Fiware-Service: {{ values.ngsi_ld.service }}'
      -H 'Fiware-ServicePath: {{ values.ngsi_ld.service_path }}'
      -H 'NGSILD-Tenant: {{ values.ngsi_ld.service }}'
      -H 'NGSILD-Path: {{ values.ngsi_ld.service_path }}'
      '{{ values.orionld.route.host | default(context_broker_base_url) }}/ngsi-ld/v1/entities/{{ ENTITY_NAME | string | urlencode }}'
      | jq
- name: Run this command to update the entity data in the context broker
  debug:
    msg: >-
      amqp-publish
      -uri amqp://{{ (values.message_broker.user + ':' + message_broker_password) if (values.message_broker.user is defined and message_broker_password is defined) else '' }}@{{ amqp_nodeport_hostname if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.host }}:{{ amqp_nodeport if (enable_dev_nodeports is defined and enable_dev_nodeports) else values.message_broker.port }}/%2F
      -exchange amq.topic
      -routing-key .{{ values.service_group.apikey }}.{{ values.device.id }}.attrs
      -body "$(cat /tmp/{{ values.service_group.apikey }}/{{ values.device.id }}.json)"
  when: values.message_broker.transport == 'AMQP'

