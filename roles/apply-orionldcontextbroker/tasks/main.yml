---

- name: Add bitnami chart repo
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami
  changed_when: false

- name: "Set mongodb namespace var"
  set_fact:
    mongodb_pod_namespace: "{{ values.mongodb.namespace | default(ansible_operator_meta.namespace, true) }}"

- name: "Query MongoDB pod"
  set_fact:
    mongodb_pod_name: "{{ query('kubernetes.core.k8s', kind='Pod', label_selector=('app.kubernetes.io/component=mongodb,app.kubernetes.io/instance=' + values.mongodb.name + ',app.kubernetes.io/name=' + values.mongodb.name | string), namespace=mongodb_pod_namespace)[0].metadata.name }}"
    
- name: Run create database scripts on MongoDB
  kubernetes.core.k8s_exec:
    pod: "{{ mongodb_pod_name }}"
    namespace: "{{ mongodb_pod_namespace }}"
    command: >-
      sh -c 'mongo -u "$MONGODB_ROOT_USER" -p "$MONGODB_ROOT_PASSWORD" --eval '"'"'
      db = db.getSiblingDB("orion");
      db.createUser({ user: "root", pwd: "'"'"'"$MONGODB_ROOT_PASSWORD"'"'"'", roles: [{ role: "dbOwner", db: "orion"}]}); 
      '"'"''
  register: create_user
  ignore_errors: True
  changed_when: false
- name: Test create_user success
  fail:
    msg: "{{ create_user }}"
  when: create_user.failed and create_user is not search("already exists")

- name: "Query MongoDB secret"
  set_fact:
    mongodb_root_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=values.mongodb.name, namespace=mongodb_pod_namespace)[0].data['mongodb-root-password'] | b64decode }}"
- name: "Install orion-ld secret on OpenShift"
  k8s:
    state: present
    kind: Secret
    api_version: v1
    name: orion-ld
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'secret-orion-ld.yaml') }}"
- name: "Install orion-ld-json-exporter-config configmap on OpenShift"
  k8s:
    state: present
    api_version: v1
    kind: ConfigMap
    name: "orion-ld-json-exporter-config"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'configmap-orion-ld-json-exporter-config.yaml') }}"
- name: "Install orion-ld service on OpenShift"
  k8s:
    state: present
    api_version: v1
    kind: Service
    name: "{{ values.orionld.service_name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'service-orion-ld.yaml') }}"
- name: "Install orion-ld deployment on OpenShift"
  k8s:
    state: present
    api_version: apps/v1
    kind: Deployment
    name: "orion-ld"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'deployment-orion-ld.yaml') }}"
- name: "Install Orion-LD route on OpenShift"
  k8s:
    state: "{{ 'present' if values.orionld.route.create else 'absent' }}"
    kind: Route
    api_version: route.openshift.io/v1
    name: orion-ld
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'route-orion-ld.yaml') }}"
  ignore_errors: true
