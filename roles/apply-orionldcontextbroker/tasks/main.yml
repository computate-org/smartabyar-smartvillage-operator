---

- name: "Query {{ ENTITY_TYPE }}"
  set_fact:
    crd: "{{ query('kubernetes.core.k8s', kind=ENTITY_TYPE, resource_name=ansible_operator_meta.name, namespace=ansible_operator_meta.namespace)[0].spec }}"
  ignore_errors: true
- name: "Verify {{ ENTITY_TYPE }} exists"
  fail:
    msg: |-
      You need to deploy a {{ ENTITY_TYPE }} to OpenShift before running this playbook. See here for an example: https://github.com/computate-org/smartvillage-operator/blob/main/config/samples/smartvillage_v1_smartabyarsmartvillage.yaml
  when: crd is not defined

- name: "Set {{ ENTITY_TYPE }} facts"
  set_fact:
    orionld: "{{ crd.orionld }}"

- name: Add bitnami chart repo
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami

- name: Install FIWARE Marinera mongodb helm chart
  kubernetes.core.helm:
    name: mongodb-orion
    chart_ref: bitnami/mongodb
    chart_version: 12.1.31
#    release_values:
#      nameOverride: "mongodb-orion"
#      fullnameOverride: "mongodb-orion"
#      architecture: replicaset
#      podSecurityContext:
#        enabled: false
#      containerSecurityContext:
#        enabled: false
#      resources:
#        limits:
#          memory: 3Gi
#        requests:
#          cpu: 50m
#          memory: 300Mi
#      persistence:
#        enabled: true
#        size: 8Gi
#      readinessProbe:
#        timeoutSeconds: 60
#      arbiter:
#        podSecurityContext:
#          enabled: false
#        containerSecurityContext:
#          enabled: false
#        podLabels:
#          marinera/platform: fiware
#          marinera/component: core
#          marinera/subcomponent: persistence
#          marinera/product: mongodb
#        resources:
#          limits:
#            memory: 1.5Gi
#          requests:
#            cpu: 50m
#            memory: 300Mi
#        readinessProbe:
#          timeoutSeconds: 60
#      systemLogVerbosity: 1
#      podLabels:
#        marinera/platform: fiware
#        marinera/component: core
#        marinera/subcomponent: persistence
#        marinera/product: mongodb
#      metrics:
#        enabled: true
#        serviceMonitor:
#          enabled: true
#        resources:
#          limits:
#            memory: 1Gi
#          requests:
#            cpu: 50m
#            memory: 50Mi
#        readinessProbe:
#          timeoutSeconds: 60
    set_values:
      - value: nameOverride=mongodb-orion
      - value: fullnameOverride=mongodb-orion
      - value: architecture=standalone
      - value: podSecurityContext.enabled=false
      - value: containerSecurityContext.enabled=false
      - value: resources.limits.memory=3Gi
      - value: resources.requests.cpu=50m
      - value: resources.requests.memory=300Mi
      - value: persistence.enabled=true
      - value: persistence.size=8Gi
      - value: readinessProbe.timeoutSeconds=60
      - value: arbiter.podSecurityContext.enabled=false
      - value: arbiter.containerSecurityContext.enabled=false
      - value: |-
          "arbiter.podLabels.marinera/platform=fiware"
      - value: |-
          "arbiter.podLabels.marinera/component=core"
      - value: |-
          "arbiter.podLabels.marinera/subcomponent=persistence"
      - value: |-
          "arbiter.podLabels.marinera/product=mongodb"
      - value: arbiter.resources.limits.memory=1.5Gi
      - value: arbiter.resources.requests.cpu=50m
      - value: arbiter.resources.requests.memory=300Mi
      - value: arbiter.readinessProbe.timeoutSeconds=60
      - value: systemLogVerbosity=1
      - value: |-
          "podLabels.marinera/platform=fiware"
      - value: |-
          "podLabels.marinera/component=core"
      - value: |-
          "podLabels.marinera/subcomponent=persistence"
      - value: |-
          "podLabels.marinera/product=mongodb"
      - value: metrics.enabled=true
      - value: serviceMonitor.enabled=true
      - value: resources.limits.memory=1Gi
      - value: resources.requests.cpu=50m
      - value: resources.requests.memory=50Mi
      - value: readinessProbe.timeoutSeconds=60
    release_namespace: "{{ ansible_operator_meta.namespace }}"
    release_state: present

- name: "Query MongoDB pod"
  set_fact:
    mongodb_pod_name: "{{ query('kubernetes.core.k8s', kind='Pod', label_selector='app.kubernetes.io/component=mongodb,app.kubernetes.io/instance=mongodb-orion,app.kubernetes.io/name=mongodb-orion', namespace=ansible_operator_meta.namespace)[0].metadata.name }}"
    
- name: Run create database scripts on MongoDB
  kubernetes.core.k8s_exec:
    pod: "{{ mongodb_pod_name }}"
    command: >-
      sh -c 'mongo -u "$MONGODB_ROOT_USER" -p "$MONGODB_ROOT_PASSWORD" --eval '"'"'
      db = db.getSiblingDB("orion");
      db.createUser({ user: "root", pwd: "'"'"'"$MONGODB_ROOT_PASSWORD"'"'"'", roles: [{ role: "dbOwner", db: "orion"}]}); 
      '"'"''
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: create_user
  ignore_errors: True
- name: Test create_user success
  fail:
    msg: "{{ command_status }}"
  when: create_user.failed and create_user is not search("already exists")

- name: "Query MongoDB secret"
  set_fact:
    mongodb_root_password: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name='mongodb-orion', namespace=ansible_operator_meta.namespace)[0].data['mongodb-root-password'] | b64decode }}"
- name: "Install orion-ld secret on OpenShift"
  k8s:
    state: present
    kind: Secret
    api_version: v1
    name: orion-ld
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'secret-orion-ld.yaml') }}"
- name: "Install orion-ld-json-exporter-config configmap on OpenShift"
  k8s:
    state: present
    api_version: v1
    kind: ConfigMap
    name: "orion-ld-json-exporter-config"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'configmap-orion-ld-json-exporter-config.yaml') }}"
- name: "Install orion-ld service on OpenShift"
  k8s:
    state: present
    api_version: v1
    kind: Service
    name: "orion-ld"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'service-orion-ld.yaml') }}"
- name: "Install orion-ld deployment on OpenShift"
  k8s:
    state: present
    api_version: apps/v1
    kind: Deployment
    name: "orion-ld"
    namespace: "{{ ansible_operator_meta.namespace }}"
    definition: "{{ lookup('template', 'deployment-orion-ld.yaml') }}"
