---
# Query SmartaByarSmartVillage and set variables
- name: "Query {{ ENTITY_TYPE }}"
  set_fact:
    crd: "{{ query('kubernetes.core.k8s', kind=ENTITY_TYPE, resource_name=ansible_operator_meta.name, namespace=ansible_operator_meta.namespace)[0].spec }}"
  ignore_errors: true
- name: "Verify {{ ENTITY_TYPE }} exists"
  fail:
    msg: |-
      You need to deploy a {{ ENTITY_TYPE }} to OpenShift before running this playbook. See here for an example: https://github.com/computate-org/smartvillage-operator/blob/main/config/samples/smartvillage_v1_smartabyarsmartvillage.yaml
  when: crd is not defined

- name: "Set {{ ENTITY_TYPE }} facts"
  set_fact:
    enable_dev_nodeports: "{{ crd.enable_dev_nodeports }}"
    zookeeper: "{{ crd.zookeeper }}"
    solr: "{{ crd.solr }}"
    sso: "{{ crd.sso }}"
    database: "{{ crd.database }}"
    fiware: "{{ crd.fiware }}"
    kafka: "{{ crd.kafka }}"
    mqtt: "{{ crd.mqtt }}"

# Install PostgreSQL
- name: Install {{ site_name }} PostgreSQL cluster on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'postgrescluster.yaml') }}"
  when: database.create

# Install Red Hat SSO
- name: Query SSO database secret
  set_fact:
    sso_database_secret: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=sso.database_secret_name, namespace=ansible_operator_meta.namespace)[0].data }}"
- name: Install keycloak-db-secret on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak-db-secret.yaml') }}"
- name: Install {{ site_name }} Keycloak cluster on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Keycloak realm on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloakrealm.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Keycloak client on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'keycloakclient.yaml') }}"
  when: sso.create

# Install Kafka
- name: Install {{ site_name }} Kafka cluster on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafka.yaml') }}"
- name: Install {{ site_name }} Kafka user on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkauser.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Kafka Topic smartvillage-sumo-run on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkatopic-smartvillage-sumo-run.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Kafka Topic smartvillage-sumo-run-report on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkatopic-smartvillage-sumo-run-report.yaml') }}"
  when: sso.create
- name: Install {{ site_name }} Kafka Topic smartvillage-sumo-stop on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'kafkatopic-smartvillage-sumo-stop.yaml') }}"
  when: sso.create

# Install AMQ Broker
- name: Install {{ site_name }} AMQ Broker on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'activemqartemis.yaml') }}"
- name: Install {{ site_name }} AMQ Broker Address on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'activemqartemisaddress.yaml') }}"

# Install Solr
- name: Install Solr configmap-computate-configset configmap on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'configmap-solr-computate-configset.yaml') }}"
- name: Install Solr role bindings on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'rolebinding-solr.yaml') }}"
- name: Install Solr service account on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'serviceaccount-solr.yaml') }}"
- name: Install Solr Cloud on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'solrcloud.yaml') }}"
- name: Install Solr route on OpenShift
  k8s:
    state: present
    definition: "{{ lookup('template', 'route-solr.yaml') }}"
#- name: Create Solr collection
#  kubernetes.core.k8s_exec:
#    pod: default-solrcloud-0
#    command: >-
#      /opt/solr/bin/solr create_collection -c {{ solr.collection }} -n computate
#    namespace: ansible_operator_meta.namespace
#    container: solrcloud-node
#  register: command_status
#  ignore_errors: True
#- name: Test create_collection success
#  fail:
#    msg: "{{ command_status }}"
#  when: command_status.failed and command_status is not search("already exists")
