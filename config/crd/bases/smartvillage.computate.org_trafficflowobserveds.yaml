---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: trafficflowobserveds.smartvillage.computate.org
spec:
  group: smartvillage.computate.org
  names:
    kind: TrafficFlowObserved
    listKind: TrafficFlowObservedList
    plural: trafficflowobserveds
    singular: trafficflowobserved
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: |
          TrafficFlowObserved is the Schema for the trafficflowobserveds API
          An observation of traffic flow conditions at a certain place and time.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the desired state of TrafficFlowObserved
            type: object
            properties:
              fiware:
                type: object
                properties:
                  service:
                    type: string
                    default: smarttrafficlights
                    description: |
                      Describes the provided service for these devices. 
                      Use all lowercase letters. 
                      No characters with accents. 
                  service_path:
                    type: string
                    default: /Sweden/Veberod/CityCenter
                    description: |
                      Fiware-ServicePath is an optional header. 
                      It is assumed that all the entities created without Fiware-ServicePath 
                      (or that don't include service path information in the database) 
                      belongs to a root scope "/" implicitely. 
                      Scope must start with "/" (only 'absolute' scopes are allowed). 
                      10 maximum scope levels in a path. 
                      50 maximum characters in each level, only alphanum and underscore allowed. 
              iot_agent:
                type: object
                properties:
                  iot_host:
                    type: string
                    default: http://iotagent-json-north-fiware.apps-crc.testing
              service_group:
                type: object
                properties:
                  cb_host:
                    type: string
                    default: http://orion-ld-fiware.apps-crc.testing
                  resource:
                    type: string
                    default: /iot/json
                  apikey:
                    type: string
                    default: VeberodIntersection1
                    description: |
                      Where apiKey is an alphanumerical string used to group devices logically 
                      (and for security matters) and deviceId is an ID that uniquely identifies the device. 
                      The API Key can be configured globally for an instance of the IoT Agent, 
                      or specifically for a given group of devices. 
              device:
                type: object
                properties:
                  transport:
                    type: string
                    default: MQTT
                    enum:
                      - MQTT
                      - AMQP
                  id:
                    type: string
                    description: |
                      A unique ID for this TrafficFlowObserved device. 
                      It can be as simple as the number 1. 
                      No characters with accents. 
                    default: Sjobovagen-SE
                  mqtt_host:
                    type: string
                    default: fiware-broker-mqtt-0-svc.fiware.svc.cluster.local
                  mqtt_port:
                    type: number
                    default: 1883
                  mqtt_subscription_topic:
                    type: string
                    default: iot/subscribe
              smartabyar_smartvillage:
                type: object
                properties:
                  enabled:
                    type: boolean
                    default: True
                  auth_secret_name:
                    type: string
                    default: keycloak-client-secret-smartvillage
                  auth_token_url:
                    type: string
                    default: https://keycloak-sso.apps-crc.testing/realms/SMARTVILLAGE/protocol/openid-connect/token
                  site_base_url:
                    type: string
                    default: https://smartvillage.apps-crc.testing
                  smart_model_api:
                    type: string
                    default: /api/traffic-flow-observed
              alternate_model:
                type: object
                properties:
                  enabled:
                    type: boolean
                    default: True
                  id:
                    default: sumo
                    type: string
              attributes:
                type: object
                properties:
                  object_id:
                    type: string
                  address:
                    type: object
                    default:
                      addressCountry: Sweden
                      addressLocality: Veberöd
                      streetAddress: Sjöbovägen
                    description: |2
                      The mailing address
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                    properties:
                      addressCountry:
                        description: Property. The country. For example, Spain. Model:'https://schema.org/addressCountry'
                        type: string
                      addressLocality:
                        description: Property. The locality in which the street address is, and which is
                          in the region. Model:'https://schema.org/addressLocality'
                        type: string
                      addressRegion:
                        description: Property. The region in which the locality is, and which is in the
                          country. Model:'https://schema.org/addressRegion'
                        type: string
                      postOfficeBoxNumber:
                        description: Property. The post office box number for PO box addresses. For example,
                          03578. Model:'https://schema.org/postOfficeBoxNumber'
                        type: string
                      postalCode:
                        description: Property. The postal code. For example, 24004. Model:'https://schema.org/https://schema.org/postalCode'
                        type: string
                      streetAddress:
                        description: Property. The street address. Model:'https://schema.org/streetAddress'
                        type: string
                  alternateName:
                    type: string
                    description: |2
                      An alternative name for this item
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  areaServed:
                    type: string
                    default: |
                      96027913#0 96027913#2 30186293 311389510#1
                    description: |2
                      The geographic area where a service or offered item is provided
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml

                      In SUMO, this attribute is known as edges: 
                      The edges the vehicle shall drive along, given as their ids, separated using spaces

                      See the SUMO docs here: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html#routes

                  averageGapDistance:
                    type: number
                    default: 1
                    description: |2
                      Average gap distance between consecutive vehicles
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml

                      In SUMO, this attribute is known as minGap: 
                      Empty space after leader [m]

                      See the SUMO docs here: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html#available_vtype_attributes

                  averageHeadwayTime:
                    type: string
                    description: |2
                      Average headway time. Headway time is the time ellapsed between two consecutive vehicles
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml

                      In SUMO, this attribute is known as tau: 
                      The driver's desired (minimum) time headway. 
                      Exact interpretation varies by model. 
                      For the default model Krauss this is based on the net space between leader back and follower front).

                      See the SUMO docs here: https://sumo.dlr.de/docs/Definition_of_Vehicles%2C_Vehicle_Types%2C_and_Routes.html
                  averageVehicleLength:
                    type: string
                    description: |2
                      Average length of the vehicles transiting during
                          the observation period
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  averageVehicleSpeed:
                    type: string
                    description: |2
                      Average speed of the vehicles transiting during the observation period
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  congested:
                    type: boolean
                    description: |2
                       Flags whether there was a traffic congestion during the observation period in the referred lane. The absence of this attribute means no traffic congestion
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  dataProvider:
                    type: string
                    description: |2
                      A sequence of characters identifying the provider of the harmonised data entity.
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  dateCreated:
                    type: string
                    description: |2
                      Entity creation timestamp. This will usually be allocated by the storage platform.
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  dateModified:
                    type: string
                    description: |2
                      Timestamp of the last modification of the entity. This will usually be allocated by the storage platform.
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  dateObserved:
                    type: string
                    description: |2
                      The date and time of this observation in ISO8601 UTC format. It can be represented by an specific time instant or by an ISO8601 interval. As a workaround for the lack of support of Orion Context Broker for datetime intervals, it can be used two separate attributes: `dateObservedFrom`, `dateObservedTo`. [DateTime](https://schema.org/DateTime) or an ISO8601 interval represented as [Text](https://schema.org/Text)
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  dateObservedFrom:
                    type: string
                    description: |2
                      Observation period start date and time. See `dateObserved`
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  dateObservedTo:
                    type: string
                    description: |2
                      Observation period end date and time. See `dateObserved`
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  description:
                    type: string
                    description: |2
                      A description of this item
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  intensity:
                    type: string
                    description: |2
                      Total number of vehicles detected during this observation period
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  laneDirection:
                    type: string
                    description: |2
                      Usual direction of travel in the lane referred by this observation. This attribute is useful when the observation is not referencing any road segment, allowing to know the direction of travel of the traffic flow observed. Enum:forward, backward'. See RoadSegment for a description of the semantics of these values.
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  laneId:
                    type: string
                    description: |2
                      Lane identifier. Lane identification is done using the conventions defined by RoadSegment entity which are based on [OpenStreetMap](http://wiki.openstreetmap.org/wiki/Forward_%26_backward,_left_%26_right).
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  name:
                    type: string
                    description: |2
                      The name of this item.
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  occupancy:
                    type: string
                    description: |2
                      Fraction of the observation time where a vehicle has been occupying the observed lane
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  owner:
                    type: object
                    description: |2
                      A List containing a JSON encoded sequence of characters referencing the unique Ids of the owner(s)
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  refRoadSegment:
                    type: string
                    description: |2
                      Concerned road segment on which the observation has been made. Reference to an entity of type RoadSegment
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  reversedLane:
                    type: boolean
                    description: |2
                      Flags whether traffic in the lane was reversed during the observation period. The absence of this attribute means no lane reversion
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  seeAlso:
                    type: object
                    description: |2
                      list of uri pointing to additional resources about the item
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  source:
                    type: string
                    description: |2
                      A sequence of characters giving the original source of the entity data as a URL. Recommended to be the fully qualified domain name of the source provider, or the URL to the source object.
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  vehicleSubType:
                    type: string
                    description: |2
                      It allows to specify a sub type of `vehicleType`, eg if the `vehicleType` is set to `Lorry` the `vehicleSubType` may be `OGV1` or `OGV2` to convey more information about the exact type of vehicle.
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
                  vehicleType:
                    type: string
                    description: |2
                      Type of vehicle from the point of view of its structural characteristics. Enum:'agriculturalVehicle, bicycle, bus, minibus, car, caravan, tram, tanker, carWithCaravan, carWithTrailer, lorry, moped, motorcycle, motorcycleWithSideCar, motorscooter, trailer, van, constructionOrMaintenanceVehicle, trolley, binTrolley, sweepingMachine, cleaningTrolley'
                      See the docs here: https://github.com/smart-data-models/dataModel.Transportation/blob/HEAD/TrafficFlowObserved/model.yaml
          status:
            description: Status defines the observed state of TrafficFlowObserved
            type: object
            x-kubernetes-preserve-unknown-fields: true
        type: object
    served: true
    storage: true
    subresources:
      status: {}
